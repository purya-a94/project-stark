import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { fetchCount } from './counterAPI'

const initialState = {
	value: 0,
	status: 'idle',
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
	'counter/fetchCount',
	async (amount, { rejectWithValue }) => {
		// The value we return becomes the `fulfilled` action payload
		// UNLESS, we return a new Error instance from the API's promise, in which case,
		// the action will be rejected and the 'error.message' property of the action
		// is the value returned from the Error on the promise.
		// const response = await fetchCount(amount)
		// return response.data

		// // WE COULD wrap things in a try/catch block and skip returning an
		// // Error instance from the promsise and simply reject stuff.
		// // This is useful if you want to return something more than a message
		// // when the promise fails.
		// // Adding 'rejectWithValue' is necessary in this scenario.
		try {
			const response = await fetchCount(amount)
			return response.data
		} catch (error) {
			return rejectWithValue(error)
		}
	}
)

export const counterSlice = createSlice({
	name: 'counter',
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {
		increment: (state) => {
			// Redux Toolkit allows us to write "mutating" logic in reducers. It
			// doesn't actually mutate the state because it uses the Immer library,
			// which detects changes to a "draft state" and produces a brand new
			// immutable state based off those changes
			state.value += 1
		},
		decrement: (state) => {
			state.value -= 1
		},
		// Use the PayloadAction type to declare the contents of `action.payload`

		// incrementByAmount: (state, action) => {
		// 	console.log(action)
		// 	state.value += action.payload
		// },

		// Modified version to alter payload (to add random IDs or stuff).
		incrementByAmount: {
			reducer: (state, action) => {
				state.value += action.payload.incValue
			},
			prepare: (incValue) => {
				const intruder = "I'm in!"
				return { payload: { incValue, intruder } }
			},
		},
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(incrementAsync.pending, (state) => {
				state.status = 'loading'
			})
			.addCase(incrementAsync.fulfilled, (state, action) => {
				state.status = 'idle'
				state.value += action.payload
			})
			.addCase(incrementAsync.rejected, (state, action) => {
				console.log(action)
			})
	},
})

export const { increment, decrement, incrementByAmount } = counterSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.counter.value

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
	const currentValue = selectCount(getState())
	if (currentValue % 2 === 1) {
		dispatch(incrementByAmount(amount))
	}
}

export default counterSlice.reducer
